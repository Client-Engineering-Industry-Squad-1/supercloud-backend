paths:
  /users:
    post:
      tags:
        - user
      summary: Create a new instance of the model and persist it into the data source.
      operationId: user.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    patch:
      tags:
        - user
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: user.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    put:
      tags:
        - user
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: user.replaceOrCreate__put_users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    get:
      tags:
        - user
      summary: Find all instances of the model matched by filter from the data source.
      operationId: user.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
      deprecated: false
  /users/replaceOrCreate:
    post:
      tags:
        - user
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: user.replaceOrCreate__post_users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/upsertWithWhere:
    post:
      tags:
        - user
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: user.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  '/users/{id}/exists':
    get:
      tags:
        - user
      summary: Check whether a model instance exists in the data source.
      operationId: 'user.exists__get_users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
  '/users/{id}':
    head:
      tags:
        - user
      summary: Check whether a model instance exists in the data source.
      operationId: 'user.exists__head_users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - user
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: user.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    put:
      tags:
        - user
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'user.replaceById__put_users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    delete:
      tags:
        - user
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: user.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
      deprecated: false
    patch:
      tags:
        - user
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: user.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  '/users/{id}/replace':
    post:
      tags:
        - user
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'user.replaceById__post_users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/findOne:
    get:
      tags:
        - user
      summary: Find first instance of the model matched by filter from the data source.
      operationId: user.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/update:
    post:
      tags:
        - user
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: user.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: integer
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /users/count:
    get:
      tags:
        - user
      summary: Count instances of the model matched by where from the data source.
      operationId: user.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /users/login:
    get:
      tags:
        - user
      operationId: user.login
      parameters:
        - name: userid
          in: query
          required: false
          type: string
        - name: password
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /appointments:
    post:
      tags:
        - appointment
      summary: Create a new instance of the model and persist it into the data source.
      operationId: appointment.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appointment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appointment'
      deprecated: false
    patch:
      tags:
        - appointment
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: appointment.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appointment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appointment'
      deprecated: false
    put:
      tags:
        - appointment
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: appointment.replaceOrCreate__put_appointments
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appointment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appointment'
      deprecated: false
    get:
      tags:
        - appointment
      summary: Find all instances of the model matched by filter from the data source.
      operationId: appointment.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/appointment'
      deprecated: false
  /appointments/replaceOrCreate:
    post:
      tags:
        - appointment
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: appointment.replaceOrCreate__post_appointments_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appointment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appointment'
      deprecated: false
  /appointments/upsertWithWhere:
    post:
      tags:
        - appointment
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: appointment.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/appointment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appointment'
      deprecated: false
  '/appointments/{id}/exists':
    get:
      tags:
        - appointment
      summary: Check whether a model instance exists in the data source.
      operationId: 'appointment.exists__get_appointments_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
  '/appointments/{id}':
    head:
      tags:
        - appointment
      summary: Check whether a model instance exists in the data source.
      operationId: 'appointment.exists__head_appointments_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - appointment
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: appointment.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appointment'
      deprecated: false
    put:
      tags:
        - appointment
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'appointment.replaceById__put_appointments_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appointment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appointment'
      deprecated: false
    delete:
      tags:
        - appointment
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: appointment.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
      deprecated: false
    patch:
      tags:
        - appointment
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: appointment.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/appointment'
        - name: id
          in: path
          description: appointment id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appointment'
      deprecated: false
  '/appointments/{id}/replace':
    post:
      tags:
        - appointment
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'appointment.replaceById__post_appointments_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appointment'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appointment'
      deprecated: false
  /appointments/findOne:
    get:
      tags:
        - appointment
      summary: Find first instance of the model matched by filter from the data source.
      operationId: appointment.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appointment'
      deprecated: false
  /appointments/update:
    post:
      tags:
        - appointment
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: appointment.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/appointment'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: integer
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /appointments/count:
    get:
      tags:
        - appointment
      summary: Count instances of the model matched by where from the data source.
      operationId: appointment.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /appointments/getAppointmentListByCA:
    get:
      tags:
        - appointment
      operationId: appointment.getAppointmentListByCA
      parameters:
        - name: clinicareaid
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/appointment'
      deprecated: false
  /appointments/getAppointmentListByUser:
    get:
      tags:
        - appointment
      operationId: appointment.getAppointmentListByUser
      parameters:
        - name: consultantid
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/appointment'
      deprecated: false
  /stations:
    post:
      tags:
        - station
      summary: Create a new instance of the model and persist it into the data source.
      operationId: station.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/station'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/station'
      deprecated: false
    patch:
      tags:
        - station
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: station.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/station'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/station'
      deprecated: false
    put:
      tags:
        - station
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: station.replaceOrCreate__put_stations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/station'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/station'
      deprecated: false
    get:
      tags:
        - station
      summary: Find all instances of the model matched by filter from the data source.
      operationId: station.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/station'
      deprecated: false
  /stations/replaceOrCreate:
    post:
      tags:
        - station
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: station.replaceOrCreate__post_stations_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/station'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/station'
      deprecated: false
  /stations/upsertWithWhere:
    post:
      tags:
        - station
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: station.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/station'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/station'
      deprecated: false
  '/stations/{id}/exists':
    get:
      tags:
        - station
      summary: Check whether a model instance exists in the data source.
      operationId: 'station.exists__get_stations_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
  '/stations/{id}':
    head:
      tags:
        - station
      summary: Check whether a model instance exists in the data source.
      operationId: 'station.exists__head_stations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - station
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: station.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/station'
      deprecated: false
    put:
      tags:
        - station
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'station.replaceById__put_stations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/station'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/station'
      deprecated: false
    delete:
      tags:
        - station
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: station.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
      deprecated: false
    patch:
      tags:
        - station
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: station.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/station'
        - name: id
          in: path
          description: station id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/station'
      deprecated: false
  '/stations/{id}/replace':
    post:
      tags:
        - station
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'station.replaceById__post_stations_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/station'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/station'
      deprecated: false
  /stations/findOne:
    get:
      tags:
        - station
      summary: Find first instance of the model matched by filter from the data source.
      operationId: station.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/station'
      deprecated: false
  /stations/update:
    post:
      tags:
        - station
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: station.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/station'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: integer
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /stations/count:
    get:
      tags:
        - station
      summary: Count instances of the model matched by where from the data source.
      operationId: station.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /stations/getStationsByCA:
    get:
      tags:
        - station
      operationId: station.getStationsByCA
      parameters:
        - name: clinicareaid
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/station'
      deprecated: false
  /patients:
    post:
      tags:
        - patient
      summary: Create a new instance of the model and persist it into the data source.
      operationId: patient.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/patient'
      deprecated: false
    patch:
      tags:
        - patient
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: patient.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/patient'
      deprecated: false
    put:
      tags:
        - patient
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: patient.replaceOrCreate__put_patients
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/patient'
      deprecated: false
    get:
      tags:
        - patient
      summary: Find all instances of the model matched by filter from the data source.
      operationId: patient.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/patient'
      deprecated: false
  /patients/replaceOrCreate:
    post:
      tags:
        - patient
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: patient.replaceOrCreate__post_patients_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/patient'
      deprecated: false
  /patients/upsertWithWhere:
    post:
      tags:
        - patient
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: patient.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/patient'
      deprecated: false
  '/patients/{id}/exists':
    get:
      tags:
        - patient
      summary: Check whether a model instance exists in the data source.
      operationId: 'patient.exists__get_patients_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
  '/patients/{id}':
    head:
      tags:
        - patient
      summary: Check whether a model instance exists in the data source.
      operationId: 'patient.exists__head_patients_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - patient
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: patient.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/patient'
      deprecated: false
    put:
      tags:
        - patient
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'patient.replaceById__put_patients_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/patient'
      deprecated: false
    delete:
      tags:
        - patient
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: patient.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
      deprecated: false
    patch:
      tags:
        - patient
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: patient.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/patient'
        - name: id
          in: path
          description: patient id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/patient'
      deprecated: false
  '/patients/{id}/replace':
    post:
      tags:
        - patient
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'patient.replaceById__post_patients_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/patient'
      deprecated: false
  /patients/findOne:
    get:
      tags:
        - patient
      summary: Find first instance of the model matched by filter from the data source.
      operationId: patient.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/patient'
      deprecated: false
  /patients/update:
    post:
      tags:
        - patient
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: patient.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/patient'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: integer
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /patients/count:
    get:
      tags:
        - patient
      summary: Count instances of the model matched by where from the data source.
      operationId: patient.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /patients/getPatientDetailsByAppointment:
    get:
      tags:
        - patient
      operationId: patient.getPatientDetailsByAppointment
      parameters:
        - name: appointmentid
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/patient'
      deprecated: false
  /requests:
    post:
      tags:
        - request
      summary: Create a new instance of the model and persist it into the data source.
      operationId: request.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/request'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/request'
      deprecated: false
    patch:
      tags:
        - request
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: request.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/request'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/request'
      deprecated: false
    put:
      tags:
        - request
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: request.replaceOrCreate__put_requests
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/request'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/request'
      deprecated: false
    get:
      tags:
        - request
      summary: Find all instances of the model matched by filter from the data source.
      operationId: request.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/request'
      deprecated: false
  /requests/replaceOrCreate:
    post:
      tags:
        - request
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: request.replaceOrCreate__post_requests_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/request'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/request'
      deprecated: false
  /requests/upsertWithWhere:
    post:
      tags:
        - request
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: request.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/request'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/request'
      deprecated: false
  '/requests/{id}/exists':
    get:
      tags:
        - request
      summary: Check whether a model instance exists in the data source.
      operationId: 'request.exists__get_requests_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
  '/requests/{id}':
    head:
      tags:
        - request
      summary: Check whether a model instance exists in the data source.
      operationId: 'request.exists__head_requests_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - request
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: request.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/request'
      deprecated: false
    put:
      tags:
        - request
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'request.replaceById__put_requests_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/request'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/request'
      deprecated: false
    delete:
      tags:
        - request
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: request.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
      deprecated: false
    patch:
      tags:
        - request
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: request.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/request'
        - name: id
          in: path
          description: request id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/request'
      deprecated: false
  '/requests/{id}/replace':
    post:
      tags:
        - request
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'request.replaceById__post_requests_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/request'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/request'
      deprecated: false
  /requests/findOne:
    get:
      tags:
        - request
      summary: Find first instance of the model matched by filter from the data source.
      operationId: request.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/request'
      deprecated: false
  /requests/update:
    post:
      tags:
        - request
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: request.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/request'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: integer
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /requests/count:
    get:
      tags:
        - request
      summary: Count instances of the model matched by where from the data source.
      operationId: request.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /requests/getProcedureCodes:
    get:
      tags:
        - request
      operationId: request.getProcedureCodes
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              data:
                type: string
      deprecated: false
  /pathways:
    post:
      tags:
        - pathway
      summary: Create a new instance of the model and persist it into the data source.
      operationId: pathway.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/pathway'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/pathway'
      deprecated: false
    patch:
      tags:
        - pathway
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: pathway.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/pathway'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/pathway'
      deprecated: false
    put:
      tags:
        - pathway
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: pathway.replaceOrCreate__put_pathways
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/pathway'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/pathway'
      deprecated: false
    get:
      tags:
        - pathway
      summary: Find all instances of the model matched by filter from the data source.
      operationId: pathway.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/pathway'
      deprecated: false
  /pathways/replaceOrCreate:
    post:
      tags:
        - pathway
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: pathway.replaceOrCreate__post_pathways_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/pathway'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/pathway'
      deprecated: false
  /pathways/upsertWithWhere:
    post:
      tags:
        - pathway
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: pathway.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/pathway'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/pathway'
      deprecated: false
  '/pathways/{id}/exists':
    get:
      tags:
        - pathway
      summary: Check whether a model instance exists in the data source.
      operationId: 'pathway.exists__get_pathways_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
  '/pathways/{id}':
    head:
      tags:
        - pathway
      summary: Check whether a model instance exists in the data source.
      operationId: 'pathway.exists__head_pathways_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - pathway
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: pathway.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/pathway'
      deprecated: false
    put:
      tags:
        - pathway
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'pathway.replaceById__put_pathways_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/pathway'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/pathway'
      deprecated: false
    delete:
      tags:
        - pathway
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: pathway.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
      deprecated: false
    patch:
      tags:
        - pathway
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: pathway.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/pathway'
        - name: id
          in: path
          description: pathway id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/pathway'
      deprecated: false
  '/pathways/{id}/replace':
    post:
      tags:
        - pathway
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'pathway.replaceById__post_pathways_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/pathway'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/pathway'
      deprecated: false
  /pathways/findOne:
    get:
      tags:
        - pathway
      summary: Find first instance of the model matched by filter from the data source.
      operationId: pathway.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/pathway'
      deprecated: false
  /pathways/update:
    post:
      tags:
        - pathway
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: pathway.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/pathway'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: integer
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /pathways/count:
    get:
      tags:
        - pathway
      summary: Count instances of the model matched by where from the data source.
      operationId: pathway.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /notes:
    post:
      tags:
        - note
      summary: Create a new instance of the model and persist it into the data source.
      operationId: note.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/note'
      deprecated: false
    patch:
      tags:
        - note
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: note.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/note'
      deprecated: false
    put:
      tags:
        - note
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: note.replaceOrCreate__put_notes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/note'
      deprecated: false
    get:
      tags:
        - note
      summary: Find all instances of the model matched by filter from the data source.
      operationId: note.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/note'
      deprecated: false
  /notes/replaceOrCreate:
    post:
      tags:
        - note
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: note.replaceOrCreate__post_notes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/note'
      deprecated: false
  /notes/upsertWithWhere:
    post:
      tags:
        - note
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: note.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/note'
      deprecated: false
  '/notes/{id}/exists':
    get:
      tags:
        - note
      summary: Check whether a model instance exists in the data source.
      operationId: 'note.exists__get_notes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
  '/notes/{id}':
    head:
      tags:
        - note
      summary: Check whether a model instance exists in the data source.
      operationId: 'note.exists__head_notes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - note
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: note.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/note'
      deprecated: false
    put:
      tags:
        - note
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'note.replaceById__put_notes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/note'
      deprecated: false
    delete:
      tags:
        - note
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: note.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
      deprecated: false
    patch:
      tags:
        - note
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: note.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/note'
        - name: id
          in: path
          description: note id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/note'
      deprecated: false
  '/notes/{id}/replace':
    post:
      tags:
        - note
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'note.replaceById__post_notes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/note'
      deprecated: false
  /notes/findOne:
    get:
      tags:
        - note
      summary: Find first instance of the model matched by filter from the data source.
      operationId: note.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/note'
      deprecated: false
  /notes/update:
    post:
      tags:
        - note
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: note.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/note'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: integer
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /notes/count:
    get:
      tags:
        - note
      summary: Count instances of the model matched by where from the data source.
      operationId: note.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /notes/getUserNote:
    get:
      tags:
        - note
      operationId: note.getUserNote
      parameters:
        - name: user_id
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/note'
      deprecated: false
  /notes/deleteUserNote:
    delete:
      tags:
        - note
      operationId: note.deleteUserNote
      parameters:
        - name: user_id
          in: query
          required: false
          type: string
        - name: user_note_id
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              done:
                type: string
      deprecated: false
  /notes/addUpdateUserNote:
    post:
      tags:
        - note
      operationId: note.addUpdateUserNote
      parameters:
        - name: user_id
          in: query
          required: false
          type: string
        - name: user_note_id
          in: query
          required: false
          type: string
        - name: note
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              done:
                type: string
      deprecated: false
  /notes/addUpdatePatientStationNote:
    post:
      tags:
        - note
      operationId: note.addUpdatePatientStationNote
      parameters:
        - name: user_id
          in: query
          required: false
          type: string
        - name: patient_appointment_id
          in: query
          required: false
          type: string
        - name: note
          in: query
          required: false
          type: string
        - name: station_id
          in: query
          required: false
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              done:
                type: string
      deprecated: false
  /clinicareas:
    post:
      tags:
        - clinicarea
      summary: Create a new instance of the model and persist it into the data source.
      operationId: clinicarea.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/clinicarea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/clinicarea'
      deprecated: false
    patch:
      tags:
        - clinicarea
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: clinicarea.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/clinicarea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/clinicarea'
      deprecated: false
    put:
      tags:
        - clinicarea
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: clinicarea.replaceOrCreate__put_clinicareas
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/clinicarea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/clinicarea'
      deprecated: false
    get:
      tags:
        - clinicarea
      summary: Find all instances of the model matched by filter from the data source.
      operationId: clinicarea.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/clinicarea'
      deprecated: false
  /clinicareas/replaceOrCreate:
    post:
      tags:
        - clinicarea
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: clinicarea.replaceOrCreate__post_clinicareas_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/clinicarea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/clinicarea'
      deprecated: false
  /clinicareas/upsertWithWhere:
    post:
      tags:
        - clinicarea
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: clinicarea.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/clinicarea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/clinicarea'
      deprecated: false
  '/clinicareas/{id}/exists':
    get:
      tags:
        - clinicarea
      summary: Check whether a model instance exists in the data source.
      operationId: 'clinicarea.exists__get_clinicareas_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
  '/clinicareas/{id}':
    head:
      tags:
        - clinicarea
      summary: Check whether a model instance exists in the data source.
      operationId: 'clinicarea.exists__head_clinicareas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - clinicarea
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: clinicarea.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/clinicarea'
      deprecated: false
    put:
      tags:
        - clinicarea
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'clinicarea.replaceById__put_clinicareas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/clinicarea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/clinicarea'
      deprecated: false
    delete:
      tags:
        - clinicarea
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: clinicarea.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
      deprecated: false
    patch:
      tags:
        - clinicarea
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: clinicarea.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/clinicarea'
        - name: id
          in: path
          description: clinicarea id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/clinicarea'
      deprecated: false
  '/clinicareas/{id}/replace':
    post:
      tags:
        - clinicarea
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'clinicarea.replaceById__post_clinicareas_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/clinicarea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/clinicarea'
      deprecated: false
  /clinicareas/findOne:
    get:
      tags:
        - clinicarea
      summary: Find first instance of the model matched by filter from the data source.
      operationId: clinicarea.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/clinicarea'
      deprecated: false
  /clinicareas/update:
    post:
      tags:
        - clinicarea
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: clinicarea.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/clinicarea'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: integer
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /clinicareas/count:
    get:
      tags:
        - clinicarea
      summary: Count instances of the model matched by where from the data source.
      operationId: clinicarea.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /stationdetails:
    post:
      tags:
        - stationdetails
      summary: Create a new instance of the model and persist it into the data source.
      operationId: stationdetails.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/stationdetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/stationdetails'
      deprecated: false
    patch:
      tags:
        - stationdetails
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: stationdetails.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/stationdetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/stationdetails'
      deprecated: false
    put:
      tags:
        - stationdetails
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: stationdetails.replaceOrCreate__put_stationdetails
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/stationdetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/stationdetails'
      deprecated: false
    get:
      tags:
        - stationdetails
      summary: Find all instances of the model matched by filter from the data source.
      operationId: stationdetails.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/stationdetails'
      deprecated: false
  /stationdetails/replaceOrCreate:
    post:
      tags:
        - stationdetails
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: stationdetails.replaceOrCreate__post_stationdetails_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/stationdetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/stationdetails'
      deprecated: false
  /stationdetails/upsertWithWhere:
    post:
      tags:
        - stationdetails
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: stationdetails.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/stationdetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/stationdetails'
      deprecated: false
  '/stationdetails/{id}/exists':
    get:
      tags:
        - stationdetails
      summary: Check whether a model instance exists in the data source.
      operationId: 'stationdetails.exists__get_stationdetails_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
  '/stationdetails/{id}':
    head:
      tags:
        - stationdetails
      summary: Check whether a model instance exists in the data source.
      operationId: 'stationdetails.exists__head_stationdetails_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - stationdetails
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: stationdetails.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/stationdetails'
      deprecated: false
    put:
      tags:
        - stationdetails
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'stationdetails.replaceById__put_stationdetails_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/stationdetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/stationdetails'
      deprecated: false
    delete:
      tags:
        - stationdetails
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: stationdetails.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
      deprecated: false
    patch:
      tags:
        - stationdetails
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: stationdetails.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/stationdetails'
        - name: id
          in: path
          description: stationdetails id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/stationdetails'
      deprecated: false
  '/stationdetails/{id}/replace':
    post:
      tags:
        - stationdetails
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'stationdetails.replaceById__post_stationdetails_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/stationdetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/stationdetails'
      deprecated: false
  /stationdetails/findOne:
    get:
      tags:
        - stationdetails
      summary: Find first instance of the model matched by filter from the data source.
      operationId: stationdetails.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/stationdetails'
      deprecated: false
  /stationdetails/update:
    post:
      tags:
        - stationdetails
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: stationdetails.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/stationdetails'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: integer
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /stationdetails/count:
    get:
      tags:
        - stationdetails
      summary: Count instances of the model matched by where from the data source.
      operationId: stationdetails.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: integer
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  user:
    properties:
      access_token:
        description: Access Token used to access APIs
        type: string
      coding:
        description: coding of user
        type: boolean
      complexreporting:
        description: Can perform complex reporting
        type: boolean
      device_token:
        description: Device Token
        type: string
      editstationsnames:
        description: can Edit stations names
        type: boolean
      firstname:
        description: First name of user
        type: string
      id:
        type: string
      is_password_changed:
        description: Has password changed
        type: boolean
      lastname:
        description: Last name of user
        type: string
      notes:
        description: Can add notes
        type: boolean
      password:
        description: password used to login
        type: string
      pathwayediting:
        description: Can edit Pathways
        type: boolean
      pin:
        description: pin for approval
        type: string
      plasterrequests:
        description: Can perform plaster requests
        type: boolean
      username:
        description: user name of user
        type: string
    required:
      - firstname
      - lastname
      - password
      - pin
      - username
  appointment:
    properties:
      appointmentdatetime:
        description: Appointment Date and Time
        type: string
      clinicareaid:
        description: ID of Clinic Area
        type: string
      consultantid:
        description: ID of Consultant
        type: string
      consultantname:
        description: Name of Consultant
        type: string
      dob:
        description: Date of Birth
        type: string
      fullname:
        description: Full Name
        type: string
      gender:
        description: Gender of patient
        type: string
      id:
        type: string
      nhsid:
        description: NSH ID
        type: string
      pathways:
        description: Array of Full Pathway Objects
        type: array
        items:
          $ref: '#/definitions/pathway'
      patientid:
        description: ID of Patient
        type: string
      status:
        description: Status of Appointment
        type: string
      statusid:
        description: ID of Status
        type: string
  station:
    properties:
      clinicareaid:
        description: Clinic Area ID
        type: string
      id:
        description: id of station
        type: string
      label:
        description: Label used in Display
        type: string
      name:
        description: name of station
        type: string
      users:
        description: Array of users of stations
        type: array
        items:
          type: string
    required:
      - clinicareaid
      - id
      - label
      - name
      - users
  patient:
    properties:
      appointmentid:
        description: Appointment Id
        type: string
      consultantid:
        type: string
      consultantname:
        type: string
      dob:
        type: string
      forename:
        type: string
      fullname:
        type: string
      gender:
        type: string
      id:
        type: string
      nhsid:
        type: string
      pathwayid:
        type: string
      pathways:
        type: array
        items:
          type: string
      stationDetails:
        type: array
        items:
          $ref: '#/definitions/stationdetails'
      status:
        type: string
      surname:
        type: string
      userid:
        type: string
  request:
    properties:
      action:
        type: string
      actionid:
        type: string
      anatomiccode:
        type: string
      bodypart:
        type: string
      bodypartid:
        type: string
      codeid:
        type: string
      id:
        type: string
      masterrequestid:
        type: string
      material:
        description: Material definition
        type: string
      materialid:
        description: Material ID
        type: string
      procedurecode:
        description: Procedure Code for Request
        type: string
      sdid:
        description: Station Details ID
        type: string
      stationid:
        description: Station ID
        type: string
  pathway:
    properties:
      appointmentid:
        description: ID of Appointment
        type: string
      createdAt:
        description: Created
        type: string
        format: date-time
      id:
        type: string
      label:
        description: Label
        type: string
      stationid:
        description: ID of Station
        type: string
      stationname:
        description: Name of Station
        type: string
      stationprogressid:
        description: ID of Station Progress
        type: string
      status:
        description: Status info
        type: string
  note:
    properties:
      id:
        type: string
      note:
        description: The Note Text information
        type: string
      sdid:
        description: Station Details ID
        type: string
      userid:
        description: User who created the Note
        type: string
  clinicarea:
    properties:
      code:
        description: NHS Code
        type: string
      contact:
        description: Contact name
        type: string
      id:
        type: string
      location:
        description: Address Location
        type: string
      name:
        description: Name of Clinic Area
        type: string
  stationdetails:
    properties:
      appointmentid:
        type: string
      id:
        type: string
      label:
        type: string
      notes:
        $ref: '#/definitions/note'
      pathwayid:
        type: string
      request:
        type: array
        items:
          $ref: '#/definitions/request'
      station:
        type: string
      stationid:
        type: string
      stationprogressid:
        type: string
      status:
        type: string
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: dashclinic-api-server
  version: 1.0.0
  title: DASH Server API
  description: APIs to support the DASHClinic Mobile App
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  OAuth Definition:
    type: oauth2
    description: ''
    flow: accessCode
    scopes:
      basicscope: ''
    authorizationUrl: 'https://api.us.apiconnect.ibmcloud.com/mjperrinusibmcom-dashclinic/dash-clinic/oauth-dash/oauth2/authorize'
    tokenUrl: 'https://api.us.apiconnect.ibmcloud.com/mjperrinusibmcom-dashclinic/dash-clinic/oauth-dash/oauth2/token'
    x-tokenIntrospect:
      url: 'https://api.us.apiconnect.ibmcloud.com/mjperrinusibmcom-dashclinic/dash-clinic/oauth-dash/oauth2/introspect'
  clientSecretHeader:
    type: apiKey
    description: ''
    in: header
    name: X-IBM-Client-Secret
  clientIdHeader:
    type: apiKey
    description: ''
    in: header
    name: X-IBM-Client-Id
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
    dash-clinic:
      properties:
        runtime-url: 'https://dashclinic-server.mybluemix.net'
        invoke-tls-profile: 'client:Loopback-client'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
          tls-profile: $(invoke-tls-profile)
  properties:
    runtime-url:
      value: ''
      description: ''
      encoded: false
    invoke-tls-profile:
      value: ''
      description: ''
      encoded: false
security:
  - clientIdHeader: []
    clientSecretHeader: []
    OAuth Definition:
      - basicscope
